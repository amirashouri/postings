// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: like.sql

package db

import (
	"context"
)

const createLike = `-- name: CreateLike :exec
INSERT INTO likes (
    user_id,
    post_id
) VALUES (
    $1, $2
)
`

type CreateLikeParams struct {
	UserID int64 `json:"user_id"`
	PostID int64 `json:"post_id"`
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) error {
	_, err := q.db.Exec(ctx, createLike, arg.UserID, arg.PostID)
	return err
}

const deleteLike = `-- name: DeleteLike :exec
DELETE FROM likes
WHERE id = $1
`

func (q *Queries) DeleteLike(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteLike, id)
	return err
}

const getLikes = `-- name: GetLikes :many
SELECT id, user_id, post_id, created_at, updated_at FROM likes
WHERE post_id = $1
`

func (q *Queries) GetLikes(ctx context.Context, postID int64) ([]Like, error) {
	rows, err := q.db.Query(ctx, getLikes, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Like{}
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PostID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
